---
title: "R Assignment #3"
author: "Eva Chillura"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format:
  html:
    self-contained: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# Load the packages we'll need
library(tidyverse)
library(lubridate)
library(readxl)
library(writexl)
library(janitor)

```

## House Democrats - First Trump Impeachment

### Load the data

Run the code below to load the data.

It will create a dataframe called `impeach`, which contains a row for every House Democrat and whether or not the member publicly called for impeachment in the case of the *first* Trump impeachment.

Additionally, a series of election results and demographics are included related to each member's district.

```{r}

impeach <- readRDS("impeach.rds")


```

### Questions

Write your code using grouping in the chunks below to help answer the following questions.

1)  How many members in the dataset favor impeachment vs. not (using the `for_impeachment` column)?

```{r}
#grouping by the column "for_impeachment" to see how many are "yes" versus "no."
#Using the summarise() function with "count = n()" to count the number of "yes"s
#and "no"s.
impeach %>% 
  group_by(for_impeachment) %>% 
  summarise(count = n())
```

From the `impeach` dataset, it reveals that `209` members favored impeachment by responding `YES` to the survey, while only `26` did not favor impeachment through their response of `NO` to the survey.  

2)  Similar to #1 above, using grouping to now break down the Democratic House members by TWO measures: those who are for or against impeachment (as you did above)....and then districts above/below national GDP.  
  
You'll want to ensure you do the grouping on both columns together, e.g. `group_by(column1, column2)`

```{r}
#using the group_by() function again, but this time adding a comma and the other
#variable that the question asks to distinguish
impeach %>%
  group_by(for_impeachment, gdp_above_national) %>%
  summarise(count = n())
```

3)  Now do the same as #2, but this time instead of GDP, group by whether the district is above or below the national average for the percentage of college graduates. The column that captures this information is `pct_bachelors_compared_to_national`.

```{r}
#same as question 2 but changing the variable
impeach %>%
  group_by(for_impeachment, pct_bachelors_compared_to_national) %>% 
  summarise(count = n())
```

4)  Let's look at the college graduation comparison in a slightly different way.  
  
Instead of counting how many districts are above/below the national average, this time summarize by the MEAN percentage of college grads (located in the column `pct_bachelors`) for districts that are Yes for impeachment vs. No.  
  
In other words, you want to end up with the calculated mean for what that percentage is for the Yes districts and the No districts.

```{r}
#this time I only grouped by for_impeachment because it was the only categorical variable needed to examine the pct_bachelors. I then used summarize() and created a name for the new column (that is not yet added to the dataset) called "average_pct_bachelors" to which I made equal to the mean() of pct_bachelors. 
impeach %>% 
  group_by(for_impeachment) %>% 
  summarise(average_pct_bachelors = mean(pct_bachelors))
```

5)  Do the same as #4, but this time show the MEAN *percentage of the vote that Donald Trump received* for districts that are Yes for impeachment vs. No.  
The relevant column for that is `trump_percent`.

```{r}
#I did the same as question 4 but swapped the variable in the mean() function and changed the name of the "new" column to reflect what it is measuring.
impeach %>% 
  group_by(for_impeachment) %>% 
  summarise(average_trump_percent = mean(trump_percent))
```

6)  Filter out only the members who are a yes for impeachment. Then of those "Yes" member, how many won their 2018 election by less than 5 percentage points (`margin_flag_2018`) vs. more?

```{r}
#I started by filtering all the responses in for_impeach to "YES" using the filter() function, then I grouped the data by the variable margin_flag_2018. Then, I used the summarise() function with count = n() to count the responses.
impeach %>% 
  filter(for_impeachment == "YES") %>% 
  group_by(margin_flag_2018) %>% 
  summarise(count = n())
```

For the members who favored impeachment, `17` won their election in 2018 by less than 5 percentage points, and `192` won their election in 2018 by 5 or more election points. 

7)  Come up with another breakdown of your choosing for how you'd like to examine this dataset. Say what you'll look at, and then put the code below to find the answer.

```{r}
impeach %>% 
  filter(flip_2018 == "Y") %>% 
  group_by(for_impeachment) %>% 
  summarise(flip_y = n())

impeach %>% 
  filter(flip_2018 == "N") %>% 
  group_by(for_impeachment) %>% 
  summarise(flip_n = n())
```

I am assuming that the variable `flip_2018` refers to districts who's party flipped in the 2018 election. From that assumption, I wanted to see how many districts flipped and how that is reflected in whether or not the member voted `YES` or `NO` for impeachment. I split up the code into the different filters, so it could be easier for me to visualize the differences between flipped districts and non-flipped districts. 

For the `r sum(flip_y)` districts that flipped in the 2018 election cycle, `31` were in favor of impeachment and `12` were not. Considering that all of the members in this dataframe are from the democratic party which was the minority hold in the House of Representatives prior to 2018, the results from this grouping exercise were not surprising. The amount of flipped seats reflects the predictable change in majority hold in the House during midterm elections when the opposite party is in presidential power. 

Also, the percentage of the district that flipped and were not in favor of impeachment compared to the districts that did not flip was interesting. For the districts that flipped in 2018, `r 100*(12/(12+31))`% voted `NO` for impeachment, while only `r 100*(14/(14+178))`% of the districts that did not flip in 2018 voted `NO` for impeachment, which is quite a stark difference. While the sample sizes of these to groups are not necessarily the best to compare, it does allow me to speculate further on how being a flipped district from Republican to Democrat might affect the voting behavior in the impeachment (i.e. making more conservative decisions to not anger the old republican base). I remember from my own district -- South Carolina 1 -- our house seat flipped that midterm cycle and our district was democratic for the first time since I've been alive. It was an insane night, and while I may have been too young to vote at the time, it still felt like a tremendous victory for us. However, Cunningham had to tread lightly because the victory was narrow, and Charleston has deep-rooted republican ties, especially with the old money in the town that has quantifiable power. One of his decisions that was controversial among his democratic base in the district was his vote `NO` on Trump's first impeachment. This happening in late 2019 and early 2020 when he was gearing up for his re-relection in the fall. I was curious to see if other flipped districts behaved similarly and how much of a difference it was to those districts that did not flip in 2018. 

7)  You'll see a column in the table called date_announced. For members who came out as a Yes for impeachment, this is the date they announced their support for it.  
  
Use the mutate() function to create two new columns: one that extracts the year from date_announced, and a second that extracts the month.

```{r}
#I used the mutate() function and within, I named my two new columns "year_announced" and "month_announced" which I assigned to the respective functions year() and month() which mutated the "date_announced" column. Then, to add these new variables to the dataframe, I assigned the whole chunck of code to "impeach."
impeach <- impeach %>%
  mutate(year_announced = year(date_announced),
         month_announced = month(date_announced))
```

8) Using the new columns you created in #7, use grouping to count up how many House Democrats during each month announced their support of impeachment.

```{r}
#I grouped by the new column "month_announced" and summarized by count. 
impeach %>% 
  group_by(month_announced) %>% 
  summarise(count = n())
```



